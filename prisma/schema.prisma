// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Urun {
  id          Int      @id @default(autoincrement())
  isim        String
  aciklama    String
  fiyat       Float
  resimUrl    String?
  kategori    String
  stok        Int      @default(0)
  olusturuldu DateTime @default(now())
  guncellendi DateTime @updatedAt
  siparisler  SiparisDetay[]
}

model Musteri {
  id          Int       @id @default(autoincrement())
  ad          String
  soyad       String
  email       String    @unique
  telefon     String?
  adres       String?
  siparisler  Siparis[]
  olusturuldu DateTime  @default(now())
  guncellendi DateTime  @updatedAt
}

model Siparis {
  id            Int            @id @default(autoincrement())
  musteriId     Int
  musteri       Musteri        @relation(fields: [musteriId], references: [id])
  toplamFiyat   Float
  durum         String         @default("beklemede") // beklemede, hazirlaniyor, yolda, tamamlandi
  siparisDetay  SiparisDetay[]
  olusturuldu   DateTime       @default(now())
  guncellendi   DateTime       @updatedAt
}

model SiparisDetay {
  id        Int      @id @default(autoincrement())
  siparisId Int
  siparis   Siparis  @relation(fields: [siparisId], references: [id])
  urunId    Int
  urun      Urun     @relation(fields: [urunId], references: [id])
  miktar    Int
  fiyat     Float
}

// Kullanıcı Rolleri için enum
enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  sifre         String
  ad            String
  soyad         String
  rol           Role      @default(STUDENT)
  telefon       String?
  adres         String?
  resimUrl      String?   // Profil resmi URL'i
  biyografi     String?   // Eğitmen biyografisi
  olusturuldu   DateTime  @default(now())
  guncellendi   DateTime  @updatedAt
  kursKayitlari KursKayit[]
  ogretmenKurslari Kurs[] @relation("OgretmenKurslari")
  blogYazilari  Blog[]    @relation("YazarBlog")
}

model Kurs {
  id           Int      @id @default(autoincrement())
  baslik      String
  slug        String   @unique
  aciklama    String   @db.Text
  fiyat       Float
  resimUrl    String?
  tag         String?
  duration    String?
  rating      Float    @default(5.0)
  olusturuldu DateTime @default(now())
  guncellendi DateTime @updatedAt

  // İlişkiler
  kategori    Kategori @relation(fields: [kategoriId], references: [id])
  kategoriId  Int
  ogretmen    User     @relation("OgretmenKurslari", fields: [ogretmenId], references: [id])
  ogretmenId  Int
  dersler     Ders[]
  kayitlar    KursKayit[]

  // JSON alanları
  whatYouWillLearn Json?    @default("[]") // string[]
  requirements     Json?    @default("[]") // string[]
  curriculum       Json?    @default("[]") // Array<{ title: string, items: Array<{ title: string, duration: string, type: string, isLocked: boolean, videoUrl?: string }> }>
  
  // Yeni alanlar
  videoUrl        String?
  kaynaklar       Json?    @default("[]")

  @@map("kurslar")
}

model Kategori {
  id          Int      @id @default(autoincrement())
  isim        String
  aciklama    String?
  kurslar     Kurs[]
  olusturuldu DateTime @default(now())
  guncellendi DateTime @updatedAt
}

model KursKayit {
  id          Int      @id @default(autoincrement())
  kursId      Int
  kurs        Kurs     @relation(fields: [kursId], references: [id])
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  durum       String   @default("aktif") // aktif, tamamlandi, iptal
  olusturuldu DateTime @default(now())
  guncellendi DateTime @updatedAt
}

model Ders {
  id          Int      @id @default(autoincrement())
  baslik      String
  icerik      String
  videoUrl    String?
  sure        Int      // dakika cinsinden
  kursId      Int
  kurs        Kurs     @relation(fields: [kursId], references: [id])
  sira        Int      // dersin sırası
  olusturuldu DateTime @default(now())
  guncellendi DateTime @updatedAt
}

model Ayarlar {
  id          Int      @id @default(autoincrement())
  anahtar     String   @unique
  deger       String
  aciklama    String?
  olusturuldu DateTime @default(now())
  guncellendi DateTime @updatedAt
}

model Blog {
  id          Int      @id @default(autoincrement())
  baslik      String
  icerik      String
  resimUrl    String?
  yazarId     Int
  yazar       User     @relation("YazarBlog", fields: [yazarId], references: [id])
  etiketler   String?
  olusturuldu DateTime @default(now())
  guncellendi DateTime @updatedAt
}

model Student {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  phone       String
  grade       String
  examType    String
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SiteSettings {
  id              String   @id @default(cuid())
  siteName        String
  siteDescription String
  contactEmail    String
  phoneNumber     String?
  address         String?
  socialMedia     Json
  smtp            Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
